{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","registerServiceWorker.js","index.js"],"names":["Business","react_default","a","createElement","className","src","this","props","business","imageSrc","alt","name","address","city","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","list","businesses","map","components_Business_Business","key","id","sortByOptions","Best Match","Highest Rated","Most Reviewed","SearchBar","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","term","location","sortBy","handleTermChange","bind","assertThisInitialized","handleLocationChange","handleSearch","sortByOption","setState","event","target","value","searchYelp","preventDefault","renderSortByOptions","onChange","placeholder","onClick","_this2","keys","sortByOptionValue","getSortByClass","handleSortByChange","Yelp","concat","url","fetch","headers","Authorization","then","response","json","jsonResponse","console","log","length","image_url","address1","zip_code","categories","title","review_count","App","components_SearchBar_SearchBar","components_BusinessList_BusinessList","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","components_App_App","document","getElementById","URL","process","origin","addEventListener","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.95d1cd31.chunk.js","sourcesContent":["import React from 'react';\nimport './Business.css';\n\nclass Business extends React.Component {\n    render() {\n        return (\n            <div className=\"Business\">\n                <div className=\"image-container\">\n                    <img src={this.props.business.imageSrc} alt={this.props.business.name}/>\n                </div>\n                <h2>{this.props.business.name}</h2>\n                <div className=\"Business-information\">\n                    <div className=\"Business-address\">\n                        <p>{this.props.business.address}</p>\n                        <p>{this.props.business.city}</p>\n                        <p>{this.props.business.state} {this.props.business.zipCode}</p>\n                    </div>\n                    <div className=\"Business-reviews\">\n                        <h3>{this.props.business.category}</h3>\n                        <h3 className=\"rating\">{this.props.business.rating} stars</h3>\n                        <p>{this.props.business.reviewCount} reviews</p>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Business;","import React from 'react';\nimport './BusinessList.css';\nimport Business from '../Business/Business.js';\n\nclass BusinessList extends React.Component {\n    render() {\n        const list = this.props.businesses.map( (business) =>\n            <Business key={business.id} business={business} />\n        );\n        return (\n            <div className=\"BusinessList\">\n                {list}\n            </div>\n        );\n    }\n}\n\nexport default BusinessList;","import React from 'react';\nimport './SearchBar.css';\n\nconst sortByOptions = {\n    'Best Match': 'best_match',\n    'Highest Rated': 'rating',\n    'Most Reviewed': 'review_count'\n};\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            term: '',\n            location: '',\n            sortBy: 'best_match'\n        };\n        this.handleTermChange = this.handleTermChange.bind(this);\n        this.handleLocationChange = this.handleLocationChange.bind(this);\n        this.handleSearch = this.handleSearch.bind(this);\n    }\n\n    getSortByClass(sortByOption) {\n        if(sortByOption === this.state.sortBy) {\n            return 'active';\n        } else {\n            return '';\n        }\n    }\n\n    handleSortByChange(sortByOption) {\n        this.setState({ sortBy: sortByOption });\n    }\n\n    handleTermChange(event) {\n        this.setState({ term: event.target.value });\n    }\n\n    handleLocationChange(event) {\n        this.setState({ location: event.target.value });\n    }\n\n    handleSearch(event) {\n        this.props.searchYelp(this.state.term, this.state.location , this.state.sortBy);\n        event.preventDefault();\n    }\n\n    render() {\n        return (\n            <div className=\"SearchBar\">\n                <div className=\"SearchBar-sort-options\">\n                    <ul>\n                        {this.renderSortByOptions()}\n                    </ul>\n                </div>\n                <div className=\"SearchBar-fields\">\n                    <input onChange={this.handleTermChange} placeholder=\"Search Businesses\" />\n                    <input onChange={this.handleLocationChange} placeholder=\"Where?\" />\n                </div>\n                <div className=\"SearchBar-submit\">\n                    <a onClick={this.handleSearch} >Let's Go</a>\n                </div>\n            </div>\n        );\n    }\n    renderSortByOptions() {\n        return Object.keys(sortByOptions).map( sortByOption => {\n            let sortByOptionValue = sortByOptions[sortByOption];\n            return <li className={this.getSortByClass(sortByOptionValue)}\n                       key={sortByOptionValue}\n                       onClick={this.handleSortByChange.bind(this, sortByOptionValue)}>{sortByOption}</li>;\n        });\n    }\n}\n\nexport default SearchBar;","const clientID = 'v4Lv4z9fI2EmrXeI3_FCxg';\nconst secret = 'ybPPIGCdz2sbdU8HxlpS1CkTS13UkWSmPeFnUlXHbxAlxkuzOsgLOjchyEcveoui';\nconst url = `https://cors-anywhere.herokuapp.com/https://api.yelp.com/oauth2/token?grant_type=client_credentials&client_id=${clientID}&client_secret=${secret}`;\nconst API_KEY = 'rgmptxLMmPXhRZ94Don1LZk-hLMAiF_iESiQaJelBHqG2H4Yk3oUbfnqklJI_RHRTKlRS3B6EAPFAhwC3ST7vOaRX67RxOWy4oG6rqXQ9Qr9a28FLuhOkbGoMQnLWXYx';\nlet accessToken;\n\nexport const Yelp = {\n    search: (term, location, sortBy) => {\n        let url = `https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`;\n        return fetch(url, { headers: { Authorization: `Bearer ${API_KEY}` } }).then( response => {\n            return response.json();\n        }).then( jsonResponse => {\n            if(jsonResponse.businesses) {\n                console.log('Number of businesses found: ' + jsonResponse.businesses.length);\n                return jsonResponse.businesses.map( business => {\n                    return {\n                        id: business.id,\n                        imageSrc: business.image_url,\n                        name: business.name,\n                        address: business.location.address1,\n                        city: business.location.city,\n                        state: business.location.state,\n                        zipCode: business.location.zip_code,\n                        category: business.categories.title,\n                        rating: business.rating,\n                        reviewCount: business.review_count\n                    }\n                });\n            }\n        })\n    }\n};\n","import React from 'react';\nimport './App.css';\nimport BusinessList from '../BusinessList/BusinessList';\nimport SearchBar from '../SearchBar/SearchBar';\nimport { Yelp } from \"../../util/Yelp\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { businesses: [] };\n        // Yelp.getAccessToken();\n        // Yelp.search('taco','','best_match');\n        this.searchYelp = this.searchYelp.bind(this);\n    }\n\n    searchYelp(term, location, sortBy) {\n        //let businesses = Yelp.search();\n\n        Yelp.search(term, location, sortBy).then( businesses => {\n            this.setState({ businesses: businesses });\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <h1>ravenous</h1>\n                <SearchBar searchYelp={this.searchYelp} />\n                <BusinessList businesses={this.state.businesses} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();"],"sourceRoot":""}